Settings:
  Output files: "/net/fs03/data3/schwartzlab/bob/Rerun_Mammals/Rodents/SISRS_Run/MasCou/contigs.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: packed
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /net/fs03/data3/schwartzlab/bob/Rerun_Mammals/Rodents/SISRS_Run/MasCou/contigs.fa
Reading reference sizes
  Time reading reference sizes: 00:00:11
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:09
bmax according to bmaxDivN setting: 255121568
Using parameters --bmax 191341176 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 191341176 --dcv 1024 --packed
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:15
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:05
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:08
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 5; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 1.27561e+08 (target: 191341175)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (191341176) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 63577646 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:15
Returning block of 63577647 for bucket 1
Getting block 2 of 8
  Reserving size (191341176) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 172388113 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:49
Returning block of 172388114 for bucket 2
Getting block 3 of 8
  Reserving size (191341176) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 134762991 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:37
Returning block of 134762992 for bucket 3
Getting block 4 of 8
  Reserving size (191341176) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 125090741 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:34
Returning block of 125090742 for bucket 4
Getting block 5 of 8
  Reserving size (191341176) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 148854247 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:41
Returning block of 148854248 for bucket 5
Getting block 6 of 8
  Reserving size (191341176) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 139445302 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:39
Returning block of 139445303 for bucket 6
Getting block 7 of 8
  Reserving size (191341176) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 146175819 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:42
Returning block of 146175820 for bucket 7
Getting block 8 of 8
  Reserving size (191341176) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 90191406 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:31
Returning block of 90191407 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 297407053
fchr[G]: 502178847
fchr[T]: 706809699
fchr[$]: 1020486272
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 617285110 bytes to primary EBWT file: /net/fs03/data3/schwartzlab/bob/Rerun_Mammals/Rodents/SISRS_Run/MasCou/contigs.1.bt2
Wrote 255121576 bytes to secondary EBWT file: /net/fs03/data3/schwartzlab/bob/Rerun_Mammals/Rodents/SISRS_Run/MasCou/contigs.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 1020486272
    bwtLen: 1020486273
    sz: 255121568
    bwtSz: 255121569
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 63780393
    offsSz: 255121572
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 5315033
    numLines: 5315033
    ebwtTotLen: 340162112
    ebwtTotSz: 340162112
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:12:06
Reading reference sizes
  Time reading reference sizes: 00:00:07
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:08
  Time to reverse reference sequence: 00:00:03
bmax according to bmaxDivN setting: 255121568
Using parameters --bmax 191341176 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 191341176 --dcv 1024 --packed
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:15
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:05
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:08
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 1.27561e+08 (target: 191341175)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (191341176) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 165868420 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:46
Returning block of 165868421 for bucket 1
Getting block 2 of 8
  Reserving size (191341176) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 37083923 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:09
Returning block of 37083924 for bucket 2
Getting block 3 of 8
  Reserving size (191341176) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 159790440 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:45
Returning block of 159790441 for bucket 3
Getting block 4 of 8
  Reserving size (191341176) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 145401030 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:41
Returning block of 145401031 for bucket 4
Getting block 5 of 8
  Reserving size (191341176) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 189313818 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:57
Returning block of 189313819 for bucket 5
Getting block 6 of 8
  Reserving size (191341176) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 31411461 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:06
Returning block of 31411462 for bucket 6
Getting block 7 of 8
  Reserving size (191341176) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 160750348 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:46
Returning block of 160750349 for bucket 7
Getting block 8 of 8
  Reserving size (191341176) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 130866825 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:37
Returning block of 130866826 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 297407053
fchr[G]: 502178847
fchr[T]: 706809699
fchr[$]: 1020486272
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 617285110 bytes to primary EBWT file: /net/fs03/data3/schwartzlab/bob/Rerun_Mammals/Rodents/SISRS_Run/MasCou/contigs.rev.1.bt2
Wrote 255121576 bytes to secondary EBWT file: /net/fs03/data3/schwartzlab/bob/Rerun_Mammals/Rodents/SISRS_Run/MasCou/contigs.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 1020486272
    bwtLen: 1020486273
    sz: 255121568
    bwtSz: 255121569
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 63780393
    offsSz: 255121572
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 5315033
    numLines: 5315033
    ebwtTotLen: 340162112
    ebwtTotSz: 340162112
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:12:28
Of 1022381442 positions, MasCou has good calls for 458271719 sites (44.82%). There were 564109723 N calls (55.18%).
Of 564109723 Ns, MasCou lost 16202876 via homozygosity threshold, 41139130 from low coverage, and 701023 from both. 506066694 sites had no pileup data.

