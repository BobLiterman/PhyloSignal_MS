Settings:
  Output files: "/net/fs03/data3/schwartzlab/bob/Rerun_Mammals/Rodents/SISRS_Run/MusMus/contigs.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: packed
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /net/fs03/data3/schwartzlab/bob/Rerun_Mammals/Rodents/SISRS_Run/MusMus/contigs.fa
Reading reference sizes
  Time reading reference sizes: 00:00:11
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:08
bmax according to bmaxDivN setting: 255203166
Using parameters --bmax 191402375 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 191402375 --dcv 1024 --packed
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:15
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:05
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:08
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 1.4583e+08 (target: 191402374)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (191402375) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 112534784 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:30
Returning block of 112534785 for bucket 1
Getting block 2 of 7
  Reserving size (191402375) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 141416722 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:38
Returning block of 141416723 for bucket 2
Getting block 3 of 7
  Reserving size (191402375) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 175660671 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:51
Returning block of 175660672 for bucket 3
Getting block 4 of 7
  Reserving size (191402375) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 189258486 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:56
Returning block of 189258487 for bucket 4
Getting block 5 of 7
  Reserving size (191402375) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 152937746 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:43
Returning block of 152937747 for bucket 5
Getting block 6 of 7
  Reserving size (191402375) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 82731497 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:21
Returning block of 82731498 for bucket 6
Getting block 7 of 7
  Reserving size (191402375) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 166272753 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:48
Returning block of 166272754 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 296668107
fchr[G]: 502298826
fchr[T]: 707820531
fchr[$]: 1020812665
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 616014546 bytes to primary EBWT file: /net/fs03/data3/schwartzlab/bob/Rerun_Mammals/Rodents/SISRS_Run/MusMus/contigs.1.bt2
Wrote 255203172 bytes to secondary EBWT file: /net/fs03/data3/schwartzlab/bob/Rerun_Mammals/Rodents/SISRS_Run/MusMus/contigs.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 1020812665
    bwtLen: 1020812666
    sz: 255203167
    bwtSz: 255203167
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 63800792
    offsSz: 255203168
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 5316733
    numLines: 5316733
    ebwtTotLen: 340270912
    ebwtTotSz: 340270912
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:10:22
Reading reference sizes
  Time reading reference sizes: 00:00:07
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:09
  Time to reverse reference sequence: 00:00:03
bmax according to bmaxDivN setting: 255203166
Using parameters --bmax 191402375 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 191402375 --dcv 1024 --packed
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:14
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:05
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:09
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 5; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 1.13424e+08 (target: 191402374)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 9
  Reserving size (191402375) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 23656458 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:05
Returning block of 23656459 for bucket 1
Getting block 2 of 9
  Reserving size (191402375) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 171874992 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:49
Returning block of 171874993 for bucket 2
Getting block 3 of 9
  Reserving size (191402375) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 143291239 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:39
Returning block of 143291240 for bucket 3
Getting block 4 of 9
  Reserving size (191402375) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 70974062 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:18
Returning block of 70974063 for bucket 4
Getting block 5 of 9
  Reserving size (191402375) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 155412776 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:45
Returning block of 155412777 for bucket 5
Getting block 6 of 9
  Reserving size (191402375) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 53914453 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:14
Returning block of 53914454 for bucket 6
Getting block 7 of 9
  Reserving size (191402375) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 187123955 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:55
Returning block of 187123956 for bucket 7
Getting block 8 of 9
  Reserving size (191402375) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 134863196 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:37
Returning block of 134863197 for bucket 8
Getting block 9 of 9
  Reserving size (191402375) for bucket 9
  Calculating Z arrays for bucket 9
  Entering block accumulator loop for bucket 9:
  bucket 9: 10%
  bucket 9: 20%
  bucket 9: 30%
  bucket 9: 40%
  bucket 9: 50%
  bucket 9: 60%
  bucket 9: 70%
  bucket 9: 80%
  bucket 9: 90%
  bucket 9: 100%
  Sorting block of length 79701526 for bucket 9
  (Using difference cover)
  Sorting block time: 00:00:21
Returning block of 79701527 for bucket 9
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 296668107
fchr[G]: 502298826
fchr[T]: 707820531
fchr[$]: 1020812665
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 616014546 bytes to primary EBWT file: /net/fs03/data3/schwartzlab/bob/Rerun_Mammals/Rodents/SISRS_Run/MusMus/contigs.rev.1.bt2
Wrote 255203172 bytes to secondary EBWT file: /net/fs03/data3/schwartzlab/bob/Rerun_Mammals/Rodents/SISRS_Run/MusMus/contigs.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 1020812665
    bwtLen: 1020812666
    sz: 255203167
    bwtSz: 255203167
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 63800792
    offsSz: 255203168
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 5316733
    numLines: 5316733
    ebwtTotLen: 340270912
    ebwtTotSz: 340270912
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:11:20
Of 1022381442 positions, MusMus has good calls for 478167512 sites (46.77%). There were 544213930 N calls (53.23%).
Of 544213930 Ns, MusMus lost 16896941 via homozygosity threshold, 31932898 from low coverage, and 536067 from both. 494848024 sites had no pileup data.

